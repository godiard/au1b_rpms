From c8b4262f4394551e83ee13138276e9358d76fcbd Mon Sep 17 00:00:00 2001
From: Gonzalo Odiard <godiard@gmail.com>
Date: Tue, 8 Oct 2013 16:51:47 -0300
Subject: [PATCH] Small fixes to "Connect to a hidden network using a profile"

This patch should be merged with the previous related patch.
Add debug log, and fixes small issues.

Signed-off-by: Gonzalo Odiard <gonzalo@laptop.org>
---
 extensions/cpsection/network/model.py | 16 +++++++++++++---
 extensions/cpsection/network/view.py  |  3 ++-
 2 files changed, 15 insertions(+), 4 deletions(-)

diff --git a/extensions/cpsection/network/model.py b/extensions/cpsection/network/model.py
index 6796421..9c783ec 100644
--- a/extensions/cpsection/network/model.py
+++ b/extensions/cpsection/network/model.py
@@ -235,6 +235,7 @@ class HiddenNetworkManager():
         self.enabled = client.get_bool(
             '/desktop/sugar/extensions/network/conf_hidden_ssid')
         if not self.enabled:
+            logging.debug('Hidden network configuration disabled')
             return
         try:
             self._bus = dbus.SystemBus()
@@ -248,7 +249,7 @@ class HiddenNetworkManager():
 
         # get the list of connectivity profiles of type "connectivity"
         self.network_profiles = []
-        logging.error('profiles %s', conn_profiles)
+        logging.debug('profiles %s', conn_profiles)
         for profile_key in conn_profiles:
             profile = conn_profiles[profile_key]
             if profile['type'] == 'connectivity':
@@ -256,6 +257,8 @@ class HiddenNetworkManager():
         self.selected_profile = None
 
     def __get_devices_reply_cb(self, devices_o):
+        logging.debug('__get_devices_reply_cb len(devices) = %d',
+                      len(devices_o))
         for dev_o in devices_o:
             self._check_device(dev_o)
 
@@ -263,12 +266,14 @@ class HiddenNetworkManager():
         logging.error('Failed to get devices: %s', err)
 
     def _check_device(self, device_o):
+        logging.debug('_check_device %s', device_o)
         device = self._bus.get_object(network.NM_SERVICE, device_o)
         props = dbus.Interface(device, dbus.PROPERTIES_IFACE)
-
         device_type = props.Get(network.NM_DEVICE_IFACE, 'DeviceType')
+        logging.debug('device_type = %s', device_type)
         if device_type == network.NM_DEVICE_TYPE_WIFI:
             state = props.Get(network.NM_DEVICE_IFACE, 'State')
+            logging.debug('state %s', state)
             if state == 100:  # Activated
                 self._active_device = device_o
 
@@ -276,24 +281,28 @@ class HiddenNetworkManager():
         logging.error('Failed to get device type: %s', err)
 
     def create_and_connect_by_ssid(self, ssid):
+        logging.debug('create_and_connect_by_ssid ssid=%s', ssid)
         connection = network.find_connection_by_ssid(ssid)
         if connection is None:
+            logging.error('connection is None')
             # Th connection do not exists
             settings = network.Settings()
             settings.connection.id = ssid
             settings.connection.type = \
                 network.NM_CONNECTION_TYPE_802_11_WIRELESS
             settings.connection.uuid = str(uuid.uuid4())
+            settings.connection.autoconnect = True
 
             settings.wireless.ssid = dbus.ByteArray(ssid)
             settings.wireless.hidden = True
-
+            logging.debug('AddAndActivateConnection')
             self._netmgr.AddAndActivateConnection(
                 settings.get_dict(),
                 self._active_device, '/',
                 reply_handler=self._add_connection_reply_cb,
                 error_handler=self._add_connection_error_cb)
         else:
+            logging.debug('ActivateConnection')
             self._netmgr.ActivateConnection(
                 connection.get_path(),
                 self._active_device, '/')
@@ -326,6 +335,7 @@ class HiddenNetworkManager():
             settings.connection.id = profile['connection.id']
             settings.connection.type = profile['connection.type']
             settings.connection.uuid = str(uuid.uuid4())
+            settings.connection.autoconnect = True
 
             settings.wireless.ssid = dbus.ByteArray(
                 profile['802-11-wireless.ssid'])
diff --git a/extensions/cpsection/network/view.py b/extensions/cpsection/network/view.py
index 8055a30..574cd6a 100644
--- a/extensions/cpsection/network/view.py
+++ b/extensions/cpsection/network/view.py
@@ -505,7 +505,6 @@ class Network(SectionView):
                 network_profiles_index[network_profile['title']] = index
 
         box_mode = ComboSettingBox(_('Mode:'), option_sets, size_group)
-        box_mode.connect('changed', self._select_hidden_network_profile)
         box_mode.combo_box.set_active(0)
 
         box_hidden_network.pack_start(box_mode, False, False, 0)
@@ -515,6 +514,8 @@ class Network(SectionView):
         self._hidden_network_params_box.show()
         box_hidden_network.pack_start(self._hidden_network_params_box, False,
                                       False, 0)
+        # _select_hidden_network_profile need the box already created
+        box_mode.connect('changed', self._select_hidden_network_profile)
 
         # show the widgets for the default mode
         self._select_hidden_network_profile(box_mode)
-- 
1.8.1.4

