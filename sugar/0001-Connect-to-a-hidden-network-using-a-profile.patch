From 2a3a5c4a825beaf78ef30aa297485db13c062e40 Mon Sep 17 00:00:00 2001
From: Gonzalo Odiard <godiard@gmail.com>
Date: Fri, 7 Mar 2014 15:04:53 -0300
Subject: [PATCH] Connect to a hidden network using a profile

This patch already include the fixes in
0001-Small-fixes-to-Connect-to-a-hidden-network-using-a-p.patch
and 0001-Avoid-error-in-network-cp-section-write-profile.patch

Signed-off-by: Gonzalo Odiard <gonzalo@laptop.org>
---
 extensions/cpsection/network/model.py | 95 ++++++++++++++++++++++++++++-------
 extensions/cpsection/network/view.py  | 77 ++++++++++++++++++++--------
 src/jarabe/desktop/networkviews.py    | 12 ++++-
 src/jarabe/model/network.py           | 23 ++++++++-
 4 files changed, 166 insertions(+), 41 deletions(-)

diff --git a/extensions/cpsection/network/model.py b/extensions/cpsection/network/model.py
index d7887c0..9f4164f 100644
--- a/extensions/cpsection/network/model.py
+++ b/extensions/cpsection/network/model.py
@@ -207,6 +207,8 @@ def get_proxy_profile_name():
 
 
 def set_proxy_profile_name(profile_name):
+    if profile_name is None:
+        profile_name = ''
     client = GConf.Client.get_default()
     client.set_string('/desktop/sugar/network/proxy/profile_name',
                       profile_name)
@@ -226,6 +228,7 @@ class HiddenNetworkManager():
         self.enabled = client.get_bool(
             '/desktop/sugar/extensions/network/conf_hidden_ssid')
         if not self.enabled:
+            logging.debug('Hidden network configuration disabled')
             return
         try:
             self._bus = dbus.SystemBus()
@@ -239,13 +242,16 @@ class HiddenNetworkManager():
 
         # get the list of connectivity profiles of type "connectivity"
         self.network_profiles = []
-        logging.error('profiles %s', conn_profiles)
+        logging.debug('profiles %s', conn_profiles)
         for profile_key in conn_profiles:
             profile = conn_profiles[profile_key]
             if profile['type'] == 'connectivity':
                 self.network_profiles.append(profile)
+        self.selected_profile = None
 
     def __get_devices_reply_cb(self, devices_o):
+        logging.debug('__get_devices_reply_cb len(devices) = %d',
+                      len(devices_o))
         for dev_o in devices_o:
             self._check_device(dev_o)
 
@@ -274,9 +280,79 @@ class HiddenNetworkManager():
             settings.connection.type = \
                 network.NM_CONNECTION_TYPE_802_11_WIRELESS
             settings.connection.uuid = str(uuid.uuid4())
+            settings.connection.autoconnect = True
 
             settings.wireless.ssid = dbus.ByteArray(ssid)
             settings.wireless.hidden = True
+            logging.debug('AddAndActivateConnection')
+            self._netmgr.AddAndActivateConnection(
+                settings.get_dict(),
+                self._active_device, '/',
+                reply_handler=self._add_connection_reply_cb,
+                error_handler=self._add_connection_error_cb)
+        else:
+            logging.debug('ActivateConnection')
+            self._netmgr.ActivateConnection(
+                connection.get_path(),
+                self._active_device, '/')
+
+    def create_and_connect_by_profile(self):
+        """
+        A profile is a dictionary with a format like this
+        profile {'title': 'Queensland', 'type': 'connectivity',
+            'connection.id': 'QDETA-X',
+            'connection.type': '802-11-wireless',
+            '802-1x.eap': 'peap',
+            '802-1x.identity': 'uuuuu',
+            '802-1x.password': 'pppppp',
+            '802-1x.phase2-auth': 'mschapv2',
+            '802-11-wireless.security': '802-11-wireless-security',
+            '802-11-wireless.ssid': 'QDETA-X',
+            '802-11-wireless-security.key-mgmt': 'wpa-eap',
+            'ipv4.method': 'auto',
+                }
+        """
+        if self.selected_profile is None:
+            logging.error('No profile selected')
+            return
+
+        profile = self.selected_profile
+        connection = network.find_connection_by_ssid(profile['connection.id'])
+        if connection is None:
+            # Th connection do not exists
+            settings = network.Settings()
+            settings.connection.id = profile['connection.id']
+            settings.connection.type = profile['connection.type']
+            settings.connection.uuid = str(uuid.uuid4())
+            settings.connection.autoconnect = True
+
+            settings.wireless.ssid = dbus.ByteArray(
+                profile['802-11-wireless.ssid'])
+            settings.wireless.hidden = True
+
+            if '802-11-wireless.security' in profile and \
+                    profile['802-11-wireless.security'].upper() not in \
+                    ('', 'NONE'):
+                settings.wireless_security = network.WirelessSecurity()
+                settings.wireless_security.key_mgmt = \
+                    profile['802-11-wireless-security.key-mgmt']
+
+                if settings.wireless_security.key_mgmt == 'wpa-eap':
+                    settings.wpa_eap_setting = network.EapSecurity()
+                    settings.wpa_eap_setting.eap = profile['802-1x.eap']
+                    settings.wpa_eap_setting.identity = profile[
+                        '802-1x.identity']
+                    settings.wpa_eap_setting.password = profile[
+                        '802-1x.password']
+                    settings.wpa_eap_setting.phase2_auth = profile[
+                        '802-1x.phase2-auth']
+
+            if 'ipv4.method' in profile and \
+                    profile['ipv4.method'].upper() not in ('', 'NONE'):
+                settings.ip4_config = network.IP4Config()
+                settings.ip4_config.method = profile['ipv4.method']
+
+            logging.error('createby_profile %s', settings.get_dict())
 
             self._netmgr.AddAndActivateConnection(
                 settings.get_dict(),
@@ -291,20 +367,5 @@ class HiddenNetworkManager():
     def _add_connection_reply_cb(self, netmgr, connection):
         logging.debug('Added connection: %s', connection)
 
-    def _add_connection_error_cb(self, netmgr, err):
+    def _add_connection_error_cb(self, err):
         logging.error('Failed to add connection: %s', err)
-
-    def get_hidden_ssid(self):
-        client = GConf.Client.get_default()
-        ssid = client.get_string(
-            '/desktop/sugar/extensions/network/hidden_network_name')
-        if ssid is None:
-            ssid = ''
-        return ssid
-
-    def set_hidden_ssid(self, ssid):
-        client = GConf.Client.get_default()
-        client.set_string(
-            '/desktop/sugar/extensions/network/hidden_network_name', ssid)
-        if ssid != '':
-            self.create_and_connect_by_ssid(ssid)
diff --git a/extensions/cpsection/network/view.py b/extensions/cpsection/network/view.py
index 6885b55..b1f16dd 100644
--- a/extensions/cpsection/network/view.py
+++ b/extensions/cpsection/network/view.py
@@ -389,12 +389,23 @@ class Network(SectionView):
 
         size_group = Gtk.SizeGroup(Gtk.SizeGroupMode.HORIZONTAL)
 
-        if len(self._hidden_conn_manager.network_profiles) > 0:
+        hidden_network_name_box = Gtk.VBox()
+        option_sets = [('No security', '', hidden_network_name_box, None)]
+        self._entries_properties = {}
+        name_box = SettingBox(_("Name"), size_group)
+        name_box.show()
+        self._hidden_network_name_entry = Gtk.Entry()
+        name_box.pack_start(self._hidden_network_name_entry, False, False, 0)
+        self._hidden_network_name_entry.show()
+        hidden_network_name_box.pack_start(name_box, False, False, 0)
+        self._entries_properties[self._hidden_network_name_entry] = \
+            '802-11-wireless.ssid'
 
-            option_sets = [('No security', '', Gtk.VBox(), None)]
+        if len(self._hidden_conn_manager.network_profiles) > 0:
 
             # load the network profiles in the option_sets
             network_profiles_index = {}
+            # map to relate the entry to the property to edit
             for network_profile in self._hidden_conn_manager.network_profiles:
                 box = Gtk.VBox()
 
@@ -434,6 +445,7 @@ class Network(SectionView):
                                 entry = Gtk.Entry()
                                 setting_box.pack_start(entry, True, True, 0)
                                 box.pack_start(setting_box, True, True, 0)
+                                self._entries_properties[entry] = key
                     count = count + 1
                 box.show_all()
 
@@ -442,27 +454,30 @@ class Network(SectionView):
                 index = len(option_sets) - 1
                 network_profiles_index[network_profile['title']] = index
 
-            box_mode = ComboSettingBox(_('Mode:'), option_sets, size_group)
-            box_mode.connect('changed', self._select_hidden_network_profile)
+        box_mode = ComboSettingBox(_('Mode:'), option_sets, size_group)
+        box_mode.combo_box.set_active(0)
 
-            box_hidden_network.pack_start(box_mode, False, False, 0)
-            box_mode.show()
-
-        name_box = SettingBox(_("Name"), size_group)
-        name_box.show()
-
-        self._hidden_network_name_entry = Gtk.Entry()
-        self._hidden_network_name_entry.set_text(
-            self._hidden_conn_manager.get_hidden_ssid())
-        name_box.pack_start(self._hidden_network_name_entry, False, False, 0)
-        self._hidden_network_name_entry.show()
-        box_hidden_network.pack_start(name_box, False, False, 0)
+        box_hidden_network.pack_start(box_mode, False, False, 0)
+        box_mode.show()
 
         self._hidden_network_params_box = Gtk.VBox()
         self._hidden_network_params_box.show()
         box_hidden_network.pack_start(self._hidden_network_params_box, False,
                                       False, 0)
 
+        # _select_hidden_network_profile need the box already created
+        box_mode.connect('changed', self._select_hidden_network_profile)
+
+        # show the widgets for the default mode
+        self._select_hidden_network_profile(box_mode)
+
+        btn_box = Gtk.HBox()
+        create_connection_btn = Gtk.Button('Connect to network')
+        create_connection_btn.connect('clicked', self.__connect_hidden_net_cb)
+        btn_box.pack_start(create_connection_btn, False, False, 0)
+        box_hidden_network.pack_start(btn_box, False, False, 0)
+        btn_box.show_all()
+
         workspace.pack_start(box_hidden_network, False, False, 0)
         box_hidden_network.show()
 
@@ -475,8 +490,30 @@ class Network(SectionView):
 
         self._hidden_network_params_box.add(new_box)
         new_box.show()
-        # TODO: apply profile
-        #profile = combo_setting_box.combo_box.get_model().get(giter, 3)[0]
+        self._hidden_conn_manager.selected_profile = \
+            combo_setting_box.combo_box.get_model().get(giter, 3)[0]
+
+    def __connect_hidden_net_cb(self, button):
+
+        profile = self._hidden_conn_manager.selected_profile
+        if profile is None:
+            if self._hidden_network_name_entry.get_text() != '':
+                self._hidden_conn_manager.create_and_connect_by_ssid(
+                    self._hidden_network_name_entry.get_text())
+        else:
+
+            # get the values from all the entries
+            current_box = self._hidden_network_params_box.get_children()[0]
+            for child in current_box.get_children():
+                # child is the SettingBox
+                entry = child.get_children()[1]
+                property_name = self._entries_properties[entry]
+                logging.error('property %s value %s', property_name,
+                              entry.get_text())
+                profile[property_name] = entry.get_text()
+            logging.error('profile %s',
+                          self._hidden_conn_manager.selected_profile)
+            self._hidden_conn_manager.create_and_connect_by_profile()
 
     def _add_proxy_section(self, workspace):
         separator_hidden_network = Gtk.HSeparator()
@@ -755,10 +792,6 @@ class Network(SectionView):
             setting.apply()
         self._model.set_proxy_profile_name(self._proxy_profile_name)
 
-        if self._hidden_conn_manager.enabled:
-            self._hidden_conn_manager.set_hidden_ssid(
-                self._hidden_network_name_entry.get_text())
-
     def _validate(self):
         if self._jabber_valid and self._radio_valid:
             self.props.is_valid = True
diff --git a/src/jarabe/desktop/networkviews.py b/src/jarabe/desktop/networkviews.py
index 9976c02..c6dffda 100644
--- a/src/jarabe/desktop/networkviews.py
+++ b/src/jarabe/desktop/networkviews.py
@@ -510,7 +510,17 @@ class WirelessNetworkView(EventPulsingIcon):
                 else:
                     logging.debug('Not setting empty value for key :%s', key)
 
-            settings.wpa_eap_setting = key_value_dict
+            eap_security = network.EapSecurity()
+            if 'eap' in key_value_dict:
+                eap_security.eap = key_value_dict['eap']
+            if 'identity' in key_value_dict:
+                eap_security.identity = key_value_dict['identity']
+            if 'password' in key_value_dict:
+                eap_security.password = key_value_dict['password']
+            if 'phase2-auth' in key_value_dict:
+                eap_security.phase2_auth = key_value_dict['phase2-auth']
+
+            settings.wpa_eap_setting = eap_security
 
         network.add_and_activate_connection(self._device, settings,
                                             self.get_first_ap().model)
diff --git a/src/jarabe/model/network.py b/src/jarabe/model/network.py
index 4f64d19..5edb2a4 100644
--- a/src/jarabe/model/network.py
+++ b/src/jarabe/model/network.py
@@ -365,6 +365,27 @@ def is_sugar_adhoc_network(ssid):
     return ssid.startswith('Ad-hoc Network')
 
 
+class EapSecurity(object):
+
+    def __init__(self):
+        self.eap = None
+        self.identity = None
+        self.password = None
+        self.phase2_auth = None
+
+    def get_dict(self):
+        eap_security = {}
+        if self.eap is not None:
+            eap_security['eap'] = [self.eap]
+        if self.identity is not None:
+            eap_security['identity'] = self.identity
+        if self.password is not None:
+            eap_security['password'] = self.password
+        if self.phase2_auth is not None:
+            eap_security['phase2-auth'] = self.phase2_auth
+        return eap_security
+
+
 class WirelessSecurity(object):
     def __init__(self):
         self.key_mgmt = None
@@ -535,7 +556,7 @@ class Settings(object):
         if self.ip4_config is not None:
             settings['ipv4'] = self.ip4_config.get_dict()
         if self.wpa_eap_setting is not None:
-            settings['802-1x'] = self.wpa_eap_setting
+            settings['802-1x'] = self.wpa_eap_setting.get_dict()
         return settings
 
 
-- 
1.8.1.4

