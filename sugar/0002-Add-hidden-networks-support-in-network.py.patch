From 4bed9ba2e95c5ca701891f72a9fb7a58d13b291f Mon Sep 17 00:00:00 2001
From: Gonzalo Odiard <godiard@gmail.com>
Date: Thu, 3 Apr 2014 10:43:51 -0300
Subject: [PATCH 2/8] Add hidden networks support in network.py

---
 src/jarabe/model/network.py | 224 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 224 insertions(+)

diff --git a/src/jarabe/model/network.py b/src/jarabe/model/network.py
index 4f858c9..257f072 100644
--- a/src/jarabe/model/network.py
+++ b/src/jarabe/model/network.py
@@ -426,6 +426,7 @@ class Wireless(object):
         self.mode = None
         self.band = None
         self.channel = None
+        self.hidden = False
 
     def get_dict(self):
         wireless = {'ssid': self.ssid}
@@ -437,6 +438,7 @@ class Wireless(object):
             wireless['band'] = self.band
         if self.channel:
             wireless['channel'] = self.channel
+        wireless['hidden'] = self.hidden
         return wireless
 
 
@@ -595,6 +597,228 @@ class SecretsResponse(object):
         self._error_cb(error)
 
 
+class HiddenNetworkManager():
+
+    def __init__(self, conn_profiles={}):
+        # DEPRECATED
+        from gi.repository import GConf
+        client = GConf.Client.get_default()
+        self.enabled = client.get_bool(
+            '/desktop/sugar/extensions/network/conf_hidden_ssid')
+        if not self.enabled:
+            logging.debug('Hidden network configuration disabled')
+            return
+        try:
+            self._bus = dbus.SystemBus()
+            self._netmgr = get_manager()
+        except dbus.DBusException:
+            logging.debug('NetworkManager not available')
+            return
+        self._active_device = None
+
+        self._netmgr.GetDevices(reply_handler=self.__get_devices_reply_cb,
+                                error_handler=self.__get_devices_error_cb)
+
+        # get the values previously saved
+        data = self._load_connection_in_use()
+        profile_name = data['profile']
+        self.selected_ssid = data['ssid']
+
+        logging.debug('get profile name = %s', profile_name)
+        self.selected_profile = None
+        # get the list of connectivity profiles of type "connectivity"
+        self.network_profiles = []
+        self.stored_parameters = {}
+        logging.debug('all profiles %s', conn_profiles)
+        for profile_key in conn_profiles:
+            profile = conn_profiles[profile_key]
+            if profile['type'] == 'connectivity':
+                self.stored_parameters[profile['title']] = \
+                    self.load_requested_parameters(profile['title'])
+                self.network_profiles.append(profile)
+                if profile_name:
+                    if profile_name == profile['title']:
+                        logging.debug('SELECTED PROFILE FOUND = %s',
+                                      profile_name)
+                        self.selected_profile = profile
+        logging.debug('stored_parameters = %s', self.stored_parameters)
+
+    def __get_devices_reply_cb(self, devices_o):
+        logging.debug('__get_devices_reply_cb len(devices) = %d',
+                      len(devices_o))
+        for dev_o in devices_o:
+            self._check_device(dev_o)
+
+    def __get_devices_error_cb(self, err):
+        logging.error('Failed to get devices: %s', err)
+
+    def _check_device(self, device_o):
+        logging.debug('_check_device %s', device_o)
+        device = self._bus.get_object(NM_SERVICE, device_o)
+        props = dbus.Interface(device, dbus.PROPERTIES_IFACE)
+        device_type = props.Get(NM_DEVICE_IFACE, 'DeviceType')
+        logging.debug('device_type = %s', device_type)
+        if device_type == NM_DEVICE_TYPE_WIFI:
+            state = props.Get(NM_DEVICE_IFACE, 'State')
+            logging.debug('state %s', state)
+            if state == 100:  # Activated
+                self._active_device = device_o
+
+    def _get_device_path_error_cb(self, err):
+        logging.error('Failed to get device type: %s', err)
+
+    def create_and_connect_by_ssid(self, ssid):
+        logging.debug('create_and_connect_by_ssid ssid=%s', ssid)
+
+        if self._active_device is None:
+            logging.error('Error trying to connect to hidden ssid, '
+                          'device not found')
+            return
+
+        self._store_connection_in_use('', ssid)
+
+        connection = find_connection_by_ssid(ssid)
+        if connection is None:
+            logging.error('connection is None')
+            # Th connection do not exists
+            settings = Settings()
+            settings.connection.id = ssid
+            settings.connection.type = \
+                NM_CONNECTION_TYPE_802_11_WIRELESS
+            settings.connection.uuid = str(uuid.uuid4())
+            settings.connection.autoconnect = True
+
+            settings.wireless.ssid = dbus.ByteArray(ssid)
+            settings.wireless.hidden = True
+            logging.debug('AddAndActivateConnection')
+            self._netmgr.AddAndActivateConnection(
+                settings.get_dict(),
+                self._active_device, '/',
+                reply_handler=self._add_connection_reply_cb,
+                error_handler=self._add_connection_error_cb)
+        else:
+            logging.debug('ActivateConnection')
+            self._netmgr.ActivateConnection(
+                connection.get_path(),
+                self._active_device, '/')
+
+    def create_and_connect_by_profile(self):
+        """
+        A profile is a dictionary with a format like this
+        profile {'title': 'Queensland', 'type': 'connectivity',
+            'connection.id': 'QDETA-X',
+            'connection.type': '802-11-wireless',
+            '802-1x.eap': 'peap',
+            '802-1x.identity': 'uuuuu',
+            '802-1x.password': 'pppppp',
+            '802-1x.phase2-auth': 'mschapv2',
+            '802-11-wireless.security': '802-11-wireless-security',
+            '802-11-wireless.ssid': 'QDETA-X',
+            '802-11-wireless-security.key-mgmt': 'wpa-eap',
+            'ipv4.method': 'auto',
+                }
+        """
+        if self.selected_profile is None:
+            logging.error('No profile selected')
+            return
+
+        if self._active_device is None:
+            logging.error('Error trying to connect to hidden ssid by     '
+                          'profile, device not found')
+            return
+
+        self._store_connection_in_use(self.selected_profile['title'], '')
+
+        profile = self.selected_profile
+        connection = find_connection_by_ssid(profile['connection.id'])
+        if connection is None:
+            # Th connection do not exists
+            settings = Settings()
+            settings.connection.id = profile['connection.id']
+            settings.connection.type = profile['connection.type']
+            settings.connection.uuid = str(uuid.uuid4())
+            settings.connection.autoconnect = True
+
+            settings.wireless.ssid = dbus.ByteArray(
+                profile['802-11-wireless.ssid'])
+            settings.wireless.hidden = True
+
+            if '802-11-wireless.security' in profile and \
+                    profile['802-11-wireless.security'].upper() not in \
+                    ('', 'NONE'):
+                settings.wireless_security = WirelessSecurity()
+                settings.wireless_security.key_mgmt = \
+                    profile['802-11-wireless-security.key-mgmt']
+
+                if settings.wireless_security.key_mgmt == 'wpa-eap':
+                    settings.wpa_eap_setting = EapSecurity()
+                    settings.wpa_eap_setting.eap = profile['802-1x.eap']
+                    settings.wpa_eap_setting.identity = profile[
+                        '802-1x.identity']
+                    settings.wpa_eap_setting.password = profile[
+                        '802-1x.password']
+                    settings.wpa_eap_setting.phase2_auth = profile[
+                        '802-1x.phase2-auth']
+
+            if 'ipv4.method' in profile and \
+                    profile['ipv4.method'].upper() not in ('', 'NONE'):
+                settings.ip4_config = IP4Config()
+                settings.ip4_config.method = profile['ipv4.method']
+
+            logging.error('createby_profile %s', settings.get_dict())
+
+            self._netmgr.AddAndActivateConnection(
+                settings.get_dict(),
+                self._active_device, '/',
+                reply_handler=self._add_connection_reply_cb,
+                error_handler=self._add_connection_error_cb)
+        else:
+            self._netmgr.ActivateConnection(
+                connection.get_path(),
+                self._active_device, '/')
+
+    def store_requested_parameters(self, requested_parameters):
+        import json
+        json_path = os.path.join(env.get_profile_path(),
+                                 ('%s.json' % self.selected_profile['title']))
+        with open(json_path, 'w') as json_file:
+            json.dump(requested_parameters, json_file)
+
+    def load_requested_parameters(self, profile_title):
+        import json
+        requested_parameters = {}
+        json_path = os.path.join(env.get_profile_path(),
+                                 ('%s.json' % profile_title))
+        if os.path.exists(json_path):
+            with open(json_path, 'w') as json_file:
+                requested_parameters = json.load(json_file)
+        return requested_parameters
+
+    def _store_connection_in_use(self, profile, ssid):
+        import json
+        json_path = os.path.join(env.get_profile_path(),
+                                 'hidden_networks.json')
+        data = {'profile': profile, 'ssid': ssid}
+        with open(json_path, 'w') as json_file:
+            json.dump(data, json_file)
+
+    def _load_connection_in_use(self):
+        import json
+        data = {'profile': '', 'ssid': ''}
+        json_path = os.path.join(env.get_profile_path(),
+                                 'hidden_networks.json')
+        if os.path.exists(json_path):
+            with open(json_path, 'w') as json_file:
+                data = json.load(json_file)
+        return data
+
+    def _add_connection_reply_cb(self, netmgr, connection):
+        logging.debug('Added connection: %s', connection)
+
+    def _add_connection_error_cb(self, err):
+        logging.error('Failed to add connection: %s', err)
+
+
 def set_connected():
     try:
         # try to flush resolver cache - SL#1940
-- 
1.8.1.4

