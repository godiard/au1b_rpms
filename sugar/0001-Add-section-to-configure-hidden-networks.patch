From 54e858b4786991f769c32ac26eac530edca276cf Mon Sep 17 00:00:00 2001
From: Gonzalo Odiard <godiard@gmail.com>
Date: Thu, 27 Mar 2014 14:39:55 -0300
Subject: [PATCH] Add section to configure hidden networks

This implementation, use network manager to create and
connect the hidden network.
No security is implemented right now.

v2 - fixes separator in the ui

Signed-off-by: Gonzalo Odiard <gonzalo@laptop.org>
---
 extensions/cpsection/network/model.py | 91 +++++++++++++++++++++++++++++++++++
 extensions/cpsection/network/view.py  | 44 +++++++++++++++--
 src/jarabe/model/network.py           |  2 +
 3 files changed, 134 insertions(+), 3 deletions(-)

diff --git a/extensions/cpsection/network/model.py b/extensions/cpsection/network/model.py
index d2b4ca6..1757fd2 100644
--- a/extensions/cpsection/network/model.py
+++ b/extensions/cpsection/network/model.py
@@ -19,6 +19,8 @@
 import logging
 
 import dbus
+import uuid
+
 from gettext import gettext as _
 from gi.repository import Gio
 
@@ -204,3 +206,92 @@ def set_publish_information(value):
     settings = Gio.Settings('org.sugarlabs.collaboration')
     settings.set_boolean('publish-gadget', value)
     return 0
+
+
+class HiddenNetworkManager():
+
+    def __init__(self):
+        # DEPRECATED
+        from gi.repository import GConf
+        client = GConf.Client.get_default()
+        self.enabled = client.get_bool(
+            '/desktop/sugar/extensions/network/conf_hidden_ssid')
+        if not self.enabled:
+            return
+        try:
+            self._bus = dbus.SystemBus()
+            self._netmgr = network.get_manager()
+        except dbus.DBusException:
+            logging.debug('NetworkManager not available')
+            return
+
+        self._netmgr.GetDevices(reply_handler=self.__get_devices_reply_cb,
+                                error_handler=self.__get_devices_error_cb)
+
+    def __get_devices_reply_cb(self, devices_o):
+        for dev_o in devices_o:
+            self._check_device(dev_o)
+
+    def __get_devices_error_cb(self, err):
+        logging.error('Failed to get devices: %s', err)
+
+    def _check_device(self, device_o):
+        device = self._bus.get_object(network.NM_SERVICE, device_o)
+        props = dbus.Interface(device, dbus.PROPERTIES_IFACE)
+
+        device_type = props.Get(network.NM_DEVICE_IFACE, 'DeviceType')
+        if device_type == network.NM_DEVICE_TYPE_WIFI:
+            state = props.Get(network.NM_DEVICE_IFACE, 'State')
+            if state == 100:  # Activated
+                self._active_device = device_o
+
+    def _get_device_path_error_cb(self, err):
+        logging.error('Failed to get device type: %s', err)
+
+    def create_and_connect_by_ssid(self, ssid):
+        connection = network.find_connection_by_ssid(ssid)
+        if connection is None:
+            # Th connection do not exists
+            settings = network.Settings()
+            settings.connection.id = ssid
+            settings.connection.type = \
+                network.NM_CONNECTION_TYPE_802_11_WIRELESS
+            settings.connection.uuid = str(uuid.uuid4())
+
+            settings.wireless.ssid = dbus.ByteArray(ssid)
+            settings.wireless.hidden = True
+
+            self._netmgr.AddAndActivateConnection(
+                settings.get_dict(),
+                self._active_device, '/',
+                reply_handler=self._add_connection_reply_cb,
+                error_handler=self._add_connection_error_cb)
+        else:
+            self._netmgr.ActivateConnection(
+                connection.get_path(),
+                self._active_device, '/')
+
+    def _add_connection_reply_cb(self, netmgr, connection):
+        logging.debug('Added connection: %s', connection)
+
+    def _add_connection_error_cb(self, netmgr, err):
+        logging.error('Failed to add connection: %s', err)
+
+    def get_hidden_ssid(self):
+        # DEPRECATED
+        from gi.repository import GConf
+        client = GConf.Client.get_default()
+        ssid = client.get_string(
+            '/desktop/sugar/extensions/network/hidden_network_name')
+        if ssid is None:
+            ssid = ''
+        return ssid
+
+    def set_hidden_ssid(self, ssid):
+        # DEPRECATED
+        from gi.repository import GConf
+        client = GConf.Client.get_default()
+        client.set_string(
+            '/desktop/sugar/extensions/network/hidden_network_name', ssid)
+        if ssid != '':
+            self.create_and_connect_by_ssid(ssid)
diff --git a/extensions/cpsection/network/view.py b/extensions/cpsection/network/view.py
index 7331ae1..a24aa56 100644
--- a/extensions/cpsection/network/view.py
+++ b/extensions/cpsection/network/view.py
@@ -27,6 +27,7 @@ from sugar3.graphics import style
 from jarabe.controlpanel.sectionview import SectionView
 from jarabe.controlpanel.inlinealert import InlineAlert
 
+from model import HiddenNetworkManager
 
 CLASS = 'Network'
 ICON = 'module-network'
@@ -309,15 +310,48 @@ class Network(SectionView):
         workspace.pack_start(box_mesh, False, True, 0)
         box_mesh.show()
 
-        separator_proxy = Gtk.HSeparator()
-        workspace.pack_start(separator_proxy, False, False, 0)
-        separator_proxy.show()
+        self._hidden_conn_manager = HiddenNetworkManager()
+        if self._hidden_conn_manager.enabled:
+            self._add_hidden_ssid_section(workspace)
 
         self._add_proxy_section(workspace)
 
         self.setup()
 
+    def _add_hidden_ssid_section(self, workspace):
+        separator_hidden_network = Gtk.HSeparator()
+        workspace.pack_start(separator_hidden_network, False, False, 0)
+        separator_hidden_network.show()
+
+        label_hidden_network = Gtk.Label(_('Hidden Networks'))
+        label_hidden_network.set_alignment(0, 0)
+        workspace.pack_start(label_hidden_network, False, False, 0)
+        label_hidden_network.show()
+        box_hidden_network = Gtk.VBox()
+        box_hidden_network.set_border_width(style.DEFAULT_SPACING * 2)
+        box_hidden_network.set_spacing(style.DEFAULT_SPACING)
+
+        info = Gtk.Label(_("Enter the name of the hidden network"))
+        info.set_alignment(0, 0)
+        info.set_line_wrap(True)
+        box_hidden_network.pack_start(info, False, False, 0)
+        info.show()
+
+        self._hidden_network_name_entry = Gtk.Entry()
+        self._hidden_network_name_entry.set_text(
+            self._hidden_conn_manager.get_hidden_ssid())
+        box_hidden_network.pack_start(self._hidden_network_name_entry, False,
+                                      False, 0)
+        self._hidden_network_name_entry.show()
+
+        workspace.pack_start(box_hidden_network, False, False, 0)
+        box_hidden_network.show()
+
     def _add_proxy_section(self, workspace):
+        separator_hidden_network = Gtk.HSeparator()
+        workspace.pack_start(separator_hidden_network, False, False, 0)
+        separator_hidden_network.show()
+
         label_proxy = Gtk.Label(_('Proxy'))
         label_proxy.set_alignment(0, 0)
         workspace.pack_start(label_proxy, False, True, 0)
@@ -472,6 +506,10 @@ class Network(SectionView):
         for setting in self._proxy_settings.values():
             setting.apply()
 
+        if self._hidden_conn_manager.enabled:
+            self._hidden_conn_manager.set_hidden_ssid(
+                self._hidden_network_name_entry.get_text())
+
     def _validate(self):
         if self._jabber_valid and self._radio_valid:
             self.props.is_valid = True
diff --git a/src/jarabe/model/network.py b/src/jarabe/model/network.py
index bb62080..0e07d2c 100644
--- a/src/jarabe/model/network.py
+++ b/src/jarabe/model/network.py
@@ -405,6 +405,7 @@ class Wireless(object):
         self.mode = None
         self.band = None
         self.channel = None
+        self.hidden = False
 
     def get_dict(self):
         wireless = {'ssid': self.ssid}
@@ -416,6 +417,7 @@ class Wireless(object):
             wireless['band'] = self.band
         if self.channel:
             wireless['channel'] = self.channel
+        wireless['hidden'] = self.hidden
         return wireless
 
 
-- 
1.8.1.4

