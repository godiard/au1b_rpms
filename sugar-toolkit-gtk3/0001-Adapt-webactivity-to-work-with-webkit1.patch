From 9769e18e67f701c7fe37b7f68ac9e2be6e07193d Mon Sep 17 00:00:00 2001
From: Gonzalo Odiard <godiard@gmail.com>
Date: Tue, 1 Oct 2013 10:26:05 -0300
Subject: [PATCH] Adapt webactivity to work with webkit1
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

It uses a local webserver, borrowed from wikipedia activity.
The web inspector is disabled, because do not work
on webkit1.

Signed-off-by: Manuel Qui√±ones <manuq@laptop.org>
Signed-off-by: Gonzalo Odiard <gonzalo@laptop.org>
---
 src/sugar3/activity/webactivity.py | 119 +++++++++++++++++++++++++++++++++----
 1 file changed, 107 insertions(+), 12 deletions(-)

diff --git a/src/sugar3/activity/webactivity.py b/src/sugar3/activity/webactivity.py
index 8952813..655447a 100644
--- a/src/sugar3/activity/webactivity.py
+++ b/src/sugar3/activity/webactivity.py
@@ -17,18 +17,85 @@
 
 import json
 import os
+import logging
+
+from gi.repository import GObject
+GObject.threads_init()
 
 from gi.repository import Gdk
 from gi.repository import Gio
-from gi.repository import WebKit2
+from gi.repository import WebKit
 from gi.repository import Gtk
 from gi.repository import GdkX11
 assert GdkX11
 
+import socket
+from threading import Thread
+
+from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
+import SocketServer
+import select
+import errno
+import mimetypes
+
 from gi.repository import SugarExt
 from sugar3.activity import activity
 
 
+class LocalRequestHandler(BaseHTTPRequestHandler):
+
+    #Handler for the GET requests
+    def do_GET(self):
+        new_path = self.server.path + '/' + self.path
+        f = open(new_path)
+        content = f.read()
+        f.close()
+        self.send_response(200)
+        mime, _encding = mimetypes.guess_type(self.path)
+        self.send_header("Content-type", mime)
+        self.end_headers()
+        self.wfile.write(content)
+        return False
+
+
+class LocalHTTPServer(HTTPServer):
+
+    def __init__(self, server_address, request_handler, path):
+        self.path = path
+        HTTPServer.__init__(self, server_address, request_handler)
+
+    def serve_forever(self, poll_interval=0.5):
+        """Overridden version of BaseServer.serve_forever that does not fail
+        to work when EINTR is received.
+        """
+        self._BaseServer__serving = True
+        self._BaseServer__is_shut_down.clear()
+        while self._BaseServer__serving:
+
+            # XXX: Consider using another file descriptor or
+            # connecting to the socket to wake this up instead of
+            # polling. Polling reduces our responsiveness to a
+            # shutdown request and wastes cpu at all other times.
+            try:
+                r, w, e = select.select([self], [], [], poll_interval)
+            except select.error, e:
+                if e[0] == errno.EINTR:
+                    logging.debug("got eintr")
+                    continue
+                raise
+            if r:
+                self._handle_request_noblock()
+        self._BaseServer__is_shut_down.set()
+
+    def server_bind(self):
+        """Override server_bind in HTTPServer to not use
+        getfqdn to get the server name because is very slow."""
+        SocketServer.TCPServer.server_bind(self)
+        host, port = self.socket.getsockname()[:2]
+        self.server_name = 'localhost'
+        self.server_port = port
+
+
 class WebActivity(Gtk.Window):
     def __init__(self, handle):
         Gtk.Window.__init__(self)
@@ -42,21 +109,36 @@ class WebActivity(Gtk.Window):
         self.set_decorated(False)
         self.maximize()
 
-        self.connect("key-press-event", self._key_press_event_cb)
+        #self.connect("key-press-event", self._key_press_event_cb)
         self.connect('realize', self._realize_cb)
         self.connect('destroy', self._destroy_cb)
 
-        context = WebKit2.WebContext.get_default()
-        context.register_uri_scheme("activity", self._app_scheme_cb, None)
-
-        self._web_view = WebKit2.WebView()
-        self._web_view.connect("load-changed", self._loading_changed_cb)
+        # Get a free socket
+        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
+        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+        sock.bind(('', 0))
+        sock.listen(socket.SOMAXCONN)
+        _ipaddr, self.port = sock.getsockname()
+        sock.shutdown(socket.SHUT_RDWR)
+        logging.error('Using port %d', self.port)
+
+        httpd = LocalHTTPServer(('', self.port),
+                                lambda *args: LocalRequestHandler(*args),
+                                activity.get_bundle_path())
+        self._server = Thread(target=httpd.serve_forever)
+        self._server.setDaemon(True)
+        self._server.start()
+
+        self._web_view = WebKit.WebView()
+        self._web_view.connect("notify::load-status", self._loading_changed_cb)
+        self._web_view.connect("resource-request-starting",
+                               self._resource_request_starting_cb)
 
         self.add(self._web_view)
         self._web_view.show()
 
-        settings = self._web_view.get_settings()
-        settings.set_property("enable-developer-extras", True)
+        #settings = self._web_view.get_settings()
+        #settings.set_property("enable-developer-extras", True)
 
         self._web_view.load_uri("activity://%s/index.html" % self._bundle_id)
 
@@ -74,8 +156,21 @@ class WebActivity(Gtk.Window):
         self.destroy()
         Gtk.main_quit()
 
-    def _loading_changed_cb(self, web_view, load_event):
-        if load_event == WebKit2.LoadEvent.FINISHED:
+    def _resource_request_starting_cb(self, webview, web_frame, web_resource,
+                                      request, response):
+        uri = web_resource.get_uri()
+        if uri.startswith('activity://'):
+            prefix = "activity://%s" % self._bundle_id
+            new_prefix = "http://0.0.0.0:%d" % self.port
+            new_uri = new_prefix + uri[len(prefix):]
+
+            request.set_uri(new_uri)
+
+    def _loading_changed_cb(self, web_view, load_status):
+        status = web_view.get_load_status()
+
+        if status == WebKit.LoadStatus.FINISHED:
+
             key = os.environ["SUGAR_APISOCKET_KEY"]
             port = os.environ["SUGAR_APISOCKET_PORT"]
 
@@ -99,7 +194,7 @@ class WebActivity(Gtk.Window):
                          window.sugar.onEnvironmentSet();
                     """ % env_json
 
-            self._web_view.run_javascript(script, None, None, None)
+            self._web_view.execute_script(script)
 
     def _key_press_event_cb(self, window, event):
         key_name = Gdk.keyval_name(event.keyval)
-- 
1.8.1.4

